#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

struct TreeNode* createNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Função auxiliar para encontrar a profundidade e o pai de um nó com um valor específico
void findDepthAndParent(struct TreeNode* node, struct TreeNode* parent, int value, int depth, int* foundDepth, struct TreeNode** foundParent) {
    if (node == NULL)
        return;
    
    if (node->val == value) {
        *foundDepth = depth;
        *foundParent = parent;
        return;
    }
    
    findDepthAndParent(node->left, node, value, depth + 1, foundDepth, foundParent);
    findDepthAndParent(node->right, node, value, depth + 1, foundDepth, foundParent);
}

bool isCousins(struct TreeNode* root, int x, int y) {
    if (root == NULL)
        return false;
    
    struct TreeNode* parentX = NULL;
    struct TreeNode* parentY = NULL;
    int depthX = -1;
    int depthY = -1;
    
    findDepthAndParent(root, NULL, x, 0, &depthX, &parentX);
    findDepthAndParent(root, NULL, y, 0, &depthY, &parentY);
    
    return (depthX == depthY) && (parentX != parentY);
}

int main() {
    int x, y;

    printf("Enter the values of nodes x and y: ");
    scanf("%d %d", &x, &y);

    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->right = createNode(4);
    root->right->right = createNode(5);
    
    bool result = isCousins(root, x, y);
    if (result)
        printf("Nodes %d and %d are cousins.\n", x, y);
    else
        printf("Nodes %d and %d are not cousins.\n", x, y);
    
    return 0;
}
